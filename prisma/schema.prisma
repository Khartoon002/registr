generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  role         String   @default("ADMIN") // enum replaced with string for SQLite
  theme        String? // JSON stored as string
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Project {
  id              String    @id @default(cuid())
  name            String
  slug            String    @unique
  description     String?
  status          String    @default("active")
  defaultWhatsApp String?
  taskerTag       String?
  createdById     String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  archivedAt      DateTime?
  deleted         Boolean   @default(false)

  packages   Package[]
  bots       Bot[]
  PersonLink PersonLink[]
  Downline   Downline[]
}

model Package {
  id          String    @id @default(cuid())
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  name        String
  slug        String
  description String?
  status      String    @default("active")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  archivedAt  DateTime?
  deleted     Boolean   @default(false)

  links     PersonLink[]
  downlines Downline[]
}

model PersonLink {
  id    String @id @default(cuid())
  token String @unique

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  packageId String
  package   Package @relation(fields: [packageId], references: [id])

  forName          String?
  forPhone         String?
  oneTime          Boolean   @default(true)
  consumedAt       DateTime?
  usedByDownlineId String? // remains a simple pointer; make a relation later if you prefer
  createdAt        DateTime  @default(now())
}

model Downline {
  id            String   @id @default(cuid())
  projectId     String
  packageId     String
  fullName      String
  username      String   @unique
  passwordHash  String
  passwordPlain String? // <-- make sure this is here
  phone         String
  email         String?
  uniqueCode    String   @unique
  createdAt     DateTime @default(now())

  Project Project @relation(fields: [projectId], references: [id])
  Package Package @relation(fields: [packageId], references: [id])
}

model Bot {
  id        String   @id @default(cuid())
  // NEW: opposite side of Project.bots
  projectId String? // optional so existing code (without projectId) still works
  project   Project? @relation(fields: [projectId], references: [id])

  name      String
  slug      String    @unique // keep global-unique slugs (no API changes needed)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  pages     BotPage[]
}

model BotPage {
  id        String   @id @default(cuid())
  botId     String
  bot       Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)
  version   Int      @default(1)
  html      String
  createdAt DateTime @default(now())

  @@unique([botId, version])
}

model Audit {
  id         String   @id @default(cuid())
  actorId    String?
  action     String
  entityType String
  entityId   String?
  oldValues  String? // JSON stored as string
  newValues  String? // JSON stored as string
  ip         String?
  userAgent  String?
  createdAt  DateTime @default(now())
}
